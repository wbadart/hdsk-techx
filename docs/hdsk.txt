-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package hdsk
@version 0.1.0.0

module Data.String.Strip
strip :: String -> String


-- | Exports a collection of functions useful for matrix decomposition.
module Hdsk.Decomposition

-- | Principal component analysis (PCA).
pca :: () => a


-- | TODO
module Hdsk.Ensemble

-- | A random forest classifier. Possible constraints: missing values,
--   normalization, support categorical/ need dummies?
randomForestClassifier :: () => a


-- | TODO
module Hdsk.Linear


-- | TODO
module Hdsk.NaiveBayes

-- | Use Naive Bayes to classify data points. Possible constraints: mixed
--   data types?
naiveBayesClassifier :: () => a


-- | TODO
module Hdsk.NearestNeighbors

-- | Classifies a data point by looking at the labels of points nearby.
kNearestNeighborsClassifier :: () => a


-- | <a>https://github.com/HuwCampbell/grenade</a>
--   https:/<i>hackage.haskell.org</i>package/grenade
module Hdsk.NeuralNetwork


-- | <a>Hdsk.Preprocessing</a> exposes a suite of data preprocessing
--   utilities.
module Hdsk.Preprocessing

-- | The <a>PreprocessedBy</a> type tags datasets of type <tt>a</tt> as
--   having been preprocessed by algorithm <tt>alg</tt>. This is useful for
--   requiring certain preprocessing steps to have occurred before
--   modeling.
newtype PreprocessedBy (algs :: [Type]) a
Preprocessed :: a -> PreprocessedBy a

-- | Algorithms which are <a>Normalizer</a>s scale data in a way that can
--   be said to eliminate units, enabling the comparison of features which,
--   raw, have different scales or even orders of magnitude.
data Normalizer

-- | <a>MissingValueHandler</a>s denote that some consideration has been
--   given to missing values within a dataset. This could be anything from
--   dropping all rows with a missing value (as with TODO), to allowing all
--   missing values to pass through (i.e. TODO).
data MissingValueHandler
dropMissingVals :: PreprocessedBy algs a -> PreprocessedBy (MissingValueHandler : algs) (f a)
keepMissingVals :: PreprocessedBy algs a -> PreprocessedBy (MissingValueHandler : algs) (f a)

-- | Standardize features by removing the mean and scaling to unit
--   variance.
standardScaler :: PreprocessedBy algs a -> PreprocessedBy (Normalizer : algs) (f a)

-- | Transform features by scaling each feature to a given range.
minMaxScaler :: PreprocessedBy algs a -> PreprocessedBy (Normalizer : algs) (f a)
noPreprocess :: f a -> PreprocessedBy '[] (f a)
instance GHC.Base.Functor (Hdsk.Preprocessing.PreprocessedBy algs)
instance GHC.Show.Show a => GHC.Show.Show (Hdsk.Preprocessing.PreprocessedBy algs a)


-- | TODO
module Hdsk.ModelSelection

-- | K-Folds cross-validator
kfold :: () => a

-- | Evalualte model performance for each configuration of its parameter
--   space.
gridSearch :: () => a

-- | Tagging and tracking partitioned data. A term of type
--   <tt><a>SplitData</a> t a</tt> refers to a partition of a dataset of
--   type <tt>a</tt> tagged with annotation <tt>t</tt>, commonly either
--   <a>Train</a> or <a>Test</a>.
data SplitData t a

-- | A tag for <a>SplitData</a> which marks the training partition of a
--   dataset.
data Train

-- | A tag for <a>SplitData</a> which marks the testing partition of a
--   dataset.
data Test

-- | Split a dataset into a training and a testing partition. Note that the
--   preprocessing stack must be empty; this prevents preprocessors from
--   leaking information from the testing partition into model training.
trainTestSplit :: PreprocessedBy '[] (f a) -> (SplitData Train a, SplitData Test a)


-- | TODO
module Hdsk.DecisionTree

-- | Trains a decision tree classifier.
decisionTreeClassifier :: Member algs MissingValueHandler (Text "This decision tree algorithm doesn't know what to do with missing values." :$$: Text "Please apply a MissingValueHandler first.") => PreprocessedBy algs (f a) -> f label

-- | Trains a decision tree regressor.
decisionTreeRegressor :: () => a

-- | Renders a decision tree object to graphviz.
exportGraphviz :: () => a


-- | Here we implement a number of different clustering algorithms.
module Hdsk.Cluster

-- | Use DBSCAN to compute a clustering of the pre-normalized dataset.
dbscan :: Member algs Normalizer (Text "DBSCAN works best with normalized data." :$$: Text "Please apply a Normalizer to your data before moving on.") => PreprocessedBy algs (f a) -> f clusterId

-- | Calculate the clustering of the pre-normalized dataset using KMeans.
--   TODO: check assumption of convex clusters, as well as choice of
--   <i>K</i>?
kmeans :: Member algs Normalizer (Text "KMeans doesn't give meaningful results on unnormalized data." :$$: Text "Please apply a Normalizer to your data first.") => PreprocessedBy algs (f a) -> f clusterId
